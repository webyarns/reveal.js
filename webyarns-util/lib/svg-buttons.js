"use strict";

/*
 * Example Map:
     const navMap1 = {
        buttons: {
            "moby": {
                showId:"d",
                to: 6,
            },
            "1984": 16,
            "write": 18,
        },
        "end": 68
    }

 *
 *
 */
function initScienceButtons(svg) {
  var map = getMap(svg); // @ts-ignore

  svg.contentDocument.querySelectorAll("a").forEach(function (a) {
    a.addEventListener("click", function (e) {
      // @ts-ignore
      e.preventDefault();
      var target = e.currentTarget;
      if (!target) throw new Error("Event has no currentTarget");
      target.classList.remove("unclicked");
      svg.blur();
      var btnId = target.getAttribute("id");
      if (!btnId) throw new Error("cannot find id attribute on ".concat(target));
      var navTo = map.buttons[btnId];

      if (navTo) {
        Reveal.slide(navTo.to || navTo);
      } else console.warn("No navigation available in ", map.buttons);

      if (navTo !== null && navTo !== void 0 && navTo.showId) {
        var btn2 = svgContentDocument(svg).getElementById(navTo.showId);
        if (!btn2) throw new Error("Could not find element with id ".concat(navTo.showId));
        btn2.classList.remove("invisible");
      }

      if (noButtonsLeft(svg)) {
        var end = map.end;

        if (!end) {
          var parentNode = svg.parentNode;
          parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(svg);
        } else {
          var _document$getElementB, _document$getElementB2, _document$getElementB3;

          end && ((_document$getElementB = document.getElementById("science-home")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.setAttribute("data-auto-move-to", end));
          end && ((_document$getElementB2 = document.getElementById("science-home")) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.setAttribute("data-auto-move-time-sec", "0.1"));
          end && ((_document$getElementB3 = document.getElementById("science-home")) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.setAttribute("data-next-slide-indexh", end));
        }
      }
    });
  });
}

function getMap(svg) {
  var attribute = svg.getAttribute("data-map");
  if (!attribute) throw new Error("object with svg requires data-map attribute  ");
  return eval(attribute);
}

function noButtonsLeft(svg) {
  var contentDocument = svg.contentDocument;
  if (!contentDocument) throw new Error("No contentDocument on svg ");
  return svgContentDocument(svg).querySelectorAll("a.unclicked").length === 0;
}

var svgContentDocument = function svgContentDocument(svg) {
  var contentDocument = svg.contentDocument;
  if (!contentDocument) throw new Error("No contentDocument on svg ");
  return contentDocument;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdmctYnV0dG9ucy50cyJdLCJuYW1lcyI6WyJpbml0U2NpZW5jZUJ1dHRvbnMiLCJzdmciLCJtYXAiLCJnZXRNYXAiLCJjb250ZW50RG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImEiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsIkVycm9yIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYmx1ciIsImJ0bklkIiwiZ2V0QXR0cmlidXRlIiwibmF2VG8iLCJidXR0b25zIiwiUmV2ZWFsIiwic2xpZGUiLCJ0byIsImNvbnNvbGUiLCJ3YXJuIiwic2hvd0lkIiwiYnRuMiIsInN2Z0NvbnRlbnREb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibm9CdXR0b25zTGVmdCIsImVuZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImRvY3VtZW50Iiwic2V0QXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZXZhbCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0EsU0FBU0Esa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQW9EO0FBQ2hELE1BQU1DLEdBQUcsR0FBR0MsTUFBTSxDQUFDRixHQUFELENBQWxCLENBRGdELENBR2hEOztBQUNBQSxFQUFBQSxHQUFHLENBQUNHLGVBQUosQ0FBb0JDLGdCQUFwQixDQUF3RCxHQUF4RCxFQUE2REMsT0FBN0QsQ0FBcUUsVUFBQUMsQ0FBQyxFQUFJO0FBQ3RFQSxJQUFBQSxDQUFDLENBQUNDLGdCQUFGLENBQW1CLE9BQW5CLEVBQTRCLFVBQUNDLENBQUQsRUFBbUI7QUFDM0M7QUFDQUEsTUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0EsVUFBTUMsTUFBbUIsR0FBZUYsQ0FBQyxD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RUQsSUFBTVYsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFDM0IsR0FBRCxFQUF1QztBQUM5RCxNQUFNRyxlQUFlLEdBQUdILEdBQUcsQ0FBQ0csZUFBNUI7QUFDQSxNQUFJLENBQUNBLGVBQUwsRUFDSSxNQUFNLElBQUlTLEtBQUosQ0FBVSw0QkFBVixDQUFOO0FBQ0osU0FBT1QsZUFBUDtBQUNILENBTEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogRXhhbXBsZSBNYXA6XG4gICAgIGNvbnN0IG5hdk1hcDEgPSB7XG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIFwibW9ieVwiOiB7XG4gICAgICAgICAgICAgICAgc2hvd0lkOlwiZFwiLFxuICAgICAgICAgICAgICAgIHRvOiA2LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiMTk4NFwiOiAxNixcbiAgICAgICAgICAgIFwid3JpdGVcIjogMTgsXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW5kXCI6IDY4XG4gICAgfVxuXG4gKlxuICpcbiAqL1xuXG5cbmZ1bmN0aW9uIGluaXRTY2llbmNlQnV0dG9ucyhzdmc6IEhUTUxPYmplY3RFbGVtZW50KSB7XG4gICAgY29uc3QgbWFwID0gZ2V0TWFwKHN2ZylcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBzdmcuY29udGVudERvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEFuY2hvckVsZW1lbnQ+KFwiYVwiKS5mb3JFYWNoKGEgPT4ge1xuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0OiBIVE1MRWxlbWVudD0gPEhUTUxFbGVtZW50PmUuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50IGhhcyBubyBjdXJyZW50VGFyZ2V0XCIpXG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcInVuY2xpY2tlZFwiKVxuICAgICAgICAgICAgc3ZnLmJsdXIoKVxuICAgICAgICAgICAgY29uc3QgYnRuSWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgICAgICBpZiAoIWJ0bklkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGZpbmQgaWQgYXR0cmlidXRlIG9uICR7dGFyZ2V0fWApXG4gICAgICAgICAgICBjb25zdCBuYXZUbyA9IG1hcC5idXR0b25zW2J0bklkXTtcbiAgICAgICAgICAgIGlmIChuYXZUbykge1xuICAgICAgICAgICAgICAgIFJldmVhbC5zbGlkZShuYXZUby50byB8fCBuYXZUbylcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIG5hdmlnYXRpb24gYXZhaWxhYmxlIGluIFwiLCBtYXAuYnV0dG9ucylcbiAgICAgICAgICAgIGlmIChuYXZUbz8uc2hvd0lkKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJ0bjIgPSBzdmdDb250ZW50RG9jdW1lbnQoc3ZnKS5nZXRFbGVtZW50QnlJZChuYXZUby5zaG93SWQpO1xuICAgICAgICAgICAgICAgIGlmICghYnRuMilcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBlbGVtZW50IHdpdGggaWQgJHtuYXZUby5zaG93SWR9YClcbiAgICAgICAgICAgICAgICBidG4yLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZpc2libGVcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub0J1dHRvbnNMZWZ0KHN2ZykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBtYXAuZW5kO1xuICAgICAgICAgICAgICAgIGlmICghZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBzdmcucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoc3ZnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbmQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzY2llbmNlLWhvbWVcIik/LnNldEF0dHJpYnV0ZShcImRhdGEtYXV0by1tb3ZlLXRvXCIsIGVuZClcbiAgICAgICAgICAgICAgICAgICAgZW5kICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2NpZW5jZS1ob21lXCIpPy5zZXRBdHRyaWJ1dGUoXCJkYXRhLWF1dG8tbW92ZS10aW1lLXNlY1wiLCBcIjAuMVwiKVxuICAgICAgICAgICAgICAgICAgICBlbmQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzY2llbmNlLWhvbWVcIik/LnNldEF0dHJpYnV0ZShcImRhdGEtbmV4dC1zbGlkZS1pbmRleGhcIiwgZW5kKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gZ2V0TWFwKHN2ZzogSFRNTE9iamVjdEVsZW1lbnQpIHtcbiAgICBsZXQgYXR0cmlidXRlID0gc3ZnLmdldEF0dHJpYnV0ZShcImRhdGEtbWFwXCIpO1xuICAgIGlmICghYXR0cmlidXRlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3Qgd2l0aCBzdmcgcmVxdWlyZXMgZGF0YS1tYXAgYXR0cmlidXRlICBcIilcbiAgICByZXR1cm4gZXZhbChhdHRyaWJ1dGUpO1xufVxuXG5cbmZ1bmN0aW9uIG5vQnV0dG9uc0xlZnQoc3ZnOiBIVE1MT2JqZWN0RWxlbWVudCkge1xuICAgIGNvbnN0IGNvbnRlbnREb2N1bWVudCA9IHN2Zy5jb250ZW50RG9jdW1lbnQ7XG4gICAgaWYgKCFjb250ZW50RG9jdW1lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNvbnRlbnREb2N1bWVudCBvbiBzdmcgXCIpXG4gICAgcmV0dXJuIHN2Z0NvbnRlbnREb2N1bWVudChzdmcpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhLnVuY2xpY2tlZFwiKS5sZW5ndGggPT09IDA7XG59XG5cbmNvbnN0IHN2Z0NvbnRlbnREb2N1bWVudCA9IChzdmc6IEhUTUxPYmplY3RFbGVtZW50KTogRG9jdW1lbnQgID0+IHtcbiAgICBjb25zdCBjb250ZW50RG9jdW1lbnQgPSBzdmcuY29udGVudERvY3VtZW50O1xuICAgIGlmICghY29udGVudERvY3VtZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjb250ZW50RG9jdW1lbnQgb24gc3ZnIFwiKVxuICAgIHJldHVybiBjb250ZW50RG9jdW1lbnRcbn1cbiJdfQ==