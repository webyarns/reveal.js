"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // Node. Does not work with strict CommonJS.
    module.exports = factory(true);
  } else {
    // Browser globals.
    // @ts-ignore
    window.Webyarns = factory();
  }
})(function () {
  var exposeAllForTests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var compose = function compose(f, g) {
    return function (x) {
      return g(f(x));
    };
  };

  var attributeNames = function attributeNames(e) {
    return Array.from(e.attributes).map(function (a) {
      return a.name;
    });
  };

  var oneOfContainedIn = function oneOfContainedIn(a2) {
    return function (a1) {
      return a1.some(function (r) {
        return a2.includes(r);
      });
    };
  };

  var containsOneOfAttributes = function containsOneOfAttributes(names) {
    return compose(attributeNames, oneOfContainedIn(names));
  }; // @ts-ignore


  var isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
  /******
   * Count the number of direct siblings matching a selector,
   ******/

  var count = function count(sb) {
    var fn = function fn(e, attributeNames) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var next = sb(e);
      return next && containsOneOfAttributes(attributeNames)(next) ? fn(next, attributeNames, i + 1) : i;
    };

    return fn;
  };

  var countNext = count(function (n) {
    return n.nextElementSibling;
  });
  var countPrev = count(function (n) {
    return n.previousElementSibling;
  });
  /******
   * Count the number of direct hidden sections
   ******/

  var genericHidingElements = ["data-hidden-section", isTouchDevice ? "data-non-touch-only-section" : "data-touch-only-section"];

  var countHiddenSiblings = function countHiddenSiblings(fn) {
    return function (e) {
      return fn(e, genericHidingElements);
    };
  };

  var noOfHiddenLeft = function noOfHiddenLeft(e) {
    if (e.getAttribute("data-autoslide")) return countPrev(e, ["data-hide-from-autoslide"]);
    return countPrev(e, ["data-right-only-section"].concat(genericHidingElements));
  };

  var noOfHiddenRight = function noOfHiddenRight(e) {
    if (e.getAttribute("data-autoslide")) return countNext(e, ["data-hide-from-autoslide"]);
    return countNext(e, ["data-left-only-section"].concat(genericHidingElements));
  };

  function getIdx(s) {
    if (!s) return null;

    if (s !== null && s !== void 0 && s.startsWith("#")) {
      var id = s.substring(1);
      return lookupIndex(id);
    } else {
      try {
        return s ? parseInt(s, 10) : null;
      } catch (e) {
        throw Error("data-next-slide-indexh, must be a number, got ".concat(s));
      }
    }
  }
  /******
   * Support for next-slide-idx
   ******/


  var getNextSlideIndexH = function getNextSlideIndexH(e) {
    var s = e.getAttribute("data-next-slide-indexh");
    return getIdx(s);
  };
  /******
   * Support for previous-slide-idx
   ******/


  var getPrevSlideIndexH = function getPrevSlideIndexH(e) {
    var s = e.getAttribute("data-previous-slide-indexh");
    return getIdx(s);
  };

  var lookupIndex = function lookupIndex(id) {
    var slides = document.querySelector(".slides");
    var f = document.getElementById(id);
    return slides && f ? Array.from(slides.children).indexOf(f) : -1;
  };
  /******
   * Exports
   ******/


  var Webyarns = {
    noOfHiddenLeft: noOfHiddenLeft,
    noOfHiddenRight: noOfHiddenRight,
    getNextSlideIndexH: getNextSlideIndexH,
    getPrevSlideIndexH: getPrevSlideIndexH,
    lookupIndex: lookupIndex
  };

  if (exposeAllForTests) {
    // For Jest
    Webyarns.countNext = countNext;
    Webyarns.countPrev = countPrev;
  }

  return Webyarns;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwid2luZG93IiwiV2VieWFybnMiLCJleHBvc2VBbGxGb3JUZXN0cyIsImNvbXBvc2UiLCJmIiwiZyIsIngiLCJhdHRyaWJ1dGVOYW1lcyIsImUiLCJBcnJheSIsImZyb20iLCJhdHRyaWJ1dGVzIiwibWFwIiwiYSIsIm5hbWUiLCJvbmVPZkNvbnRhaW5lZEluIiwiYTIiLCJhMSIsInNvbWUiLCJyIiwiaW5jbHVkZXMiLCJjb250YWluc09uZU9mQXR0cmlidXRlcyIsIm5hbWVzIiwiaXNUb3VjaERldmljZSIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsImNvdW50Iiwic2IiLCJmbiIsImkiLCJuZXh0IiwiY291bnROZXh0IiwibiIsIm5leHRFbGVtZW50U2libGluZyIsImNvdW50UHJldiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJnZW5lcmljSGlkaW5nRWxlbWVudHMiLCJjb3VudEhpZGRlblNpYmxpbmdzIiwibm9PZkhpZGRlbkxlZnQiLCJnZXRBdHRyaWJ1dGUiLCJub09mSGlkZGVuUmlnaHQiLCJnZXRJZHgiLCJzIiwic3RhcnRzV2l0aCIsImlkIiwic3Vic3RyaW5nIiwibG9va3VwSW5kZXgiLCJwYXJzZUludCIsIkVycm9yIiwiZ2V0TmV4dFNsaWRlSW5kZXhIIiwiZ2V0UHJldlNsaWRlSW5kZXhIIiwic2xpZGVzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGlsZHJlbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQyxXQUFVQSxPQUFWLEVBQW1CO0FBQ2hCLE1BQUksUUFBT0MsT0FBUCx5Q0FBT0EsT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUM3QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNELE9BQVAsR0FBaUJELE9BQU8sQ0FBQyxJQUFELENB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biAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMuXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMuXG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB3aW5kb3cuV2VieWFybnMgPSBmYWN0b3J5KCk7XG4gICAgfVxufSgoZXhwb3NlQWxsRm9yVGVzdHM6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuXG4gICAgY29uc3QgY29tcG9zZSA9IDxBLCBCLCBDPihmOiAoYXJnOiBBKSA9PiBCLCBnOiAoYXJnOiBCKSA9PiBDKTogKGFyZzogQSkgPT4gQyA9PiB4ID0+IGcoZih4KSk7XG4gICAgY29uc3QgYXR0cmlidXRlTmFtZXM6IChlOiBFbGVtZW50KSA9PiBzdHJpbmdbXSA9IChlOiBFbGVtZW50KSA9PiBBcnJheS5mcm9tKGUuYXR0cmlidXRlcykubWFwKGEgPT4gYS5uYW1lKTtcbiAgICBjb25zdCBvbmVPZkNvbnRhaW5lZEluID0gPFQ+KGEyOiBBcnJheTxUPikgPT4gKGExOiBBcnJheTxUPikgPT4gYTEuc29tZShyID0+IGEyLmluY2x1ZGVzKHIpKTtcbiAgICBjb25zdCBjb250YWluc09uZU9mQXR0cmlidXRlcyA9IChuYW1lczogc3RyaW5nW10pID0+IGNvbXBvc2UoYXR0cmlidXRlTmFtZXMsIG9uZU9mQ29udGFpbmVkSW4obmFtZXMpKTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBpc1RvdWNoRGV2aWNlOiBib29sZWFuID0gKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApIHx8IChuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDApO1xuXG4gICAgLyoqKioqKlxuICAgICAqIENvdW50IHRoZSBudW1iZXIgb2YgZGlyZWN0IHNpYmxpbmdzIG1hdGNoaW5nIGEgc2VsZWN0b3IsXG4gICAgICoqKioqKi9cbiAgICBjb25zdCBjb3VudCA9IChzYjogKGU6IEVsZW1lbnQpID0+IEVsZW1lbnQgfCBudWxsKSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gKGU6IEVsZW1lbnQsIGF0dHJpYnV0ZU5hbWVzOiBzdHJpbmdbXSwgaSA9IDApOiBudW1iZXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IHNiKGUpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQgJiYgY29udGFpbnNPbmVPZkF0dHJpYnV0ZXMoYXR0cmlidXRlTmFtZXMpKG5leHQpID8gZm4obmV4dCwgYXR0cmlidXRlTmFtZXMsIGkgKyAxKSA6IGk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmblxuICAgIH07XG5cblxuICAgIGNvbnN0IGNvdW50TmV4dDogKGU6IEVsZW1lbnQsIG5hbWVzOiBzdHJpbmdbXSkgPT4gbnVtYmVyID0gY291bnQobiA9PiBuLm5leHRFbGVtZW50U2libGluZyk7XG4gICAgY29uc3QgY291bnRQcmV2OiAoZTogRWxlbWVudCwgbmFtZXM6IHN0cmluZ1tdKSA9PiBudW1iZXIgPSBjb3VudChuID0+IG4ucHJldmlvdXNFbGVtZW50U2libGluZyk7XG5cbiAgICAvKioqKioqXG4gICAgICogQ291bnQgdGhlIG51bWJlciBvZiBkaXJlY3QgaGlkZGVuIHNlY3Rpb25zXG4gICAgICoqKioqKi9cbiAgICBjb25zdCBnZW5lcmljSGlkaW5nRWxlbWVudHMgPSBbXG4gICAgICAgIFwiZGF0YS1oaWRkZW4tc2VjdGlvblwiLFxuICAgICAgICBpc1RvdWNoRGV2aWNlID8gXCJkYXRhLW5vbi10b3VjaC1vbmx5LXNlY3Rpb25cIiA6IFwiZGF0YS10b3VjaC1vbmx5LXNlY3Rpb25cIlxuICAgIF07XG4gICAgY29uc3QgY291bnRIaWRkZW5TaWJsaW5ncyA9IChmbjogKGU6IEVsZW1lbnQsIG5hbWVzOiBzdHJpbmdbXSkgPT4gbnVtYmVyKSA9PiAoZTogRWxlbWVudCkgPT4gZm4oZSwgZ2VuZXJpY0hpZGluZ0VsZW1lbnRzKTtcblxuICAgIGNvbnN0IG5vT2ZIaWRkZW5MZWZ0ID0gKGU6IEVsZW1lbnQpID0+IHtcbiAgICAgICAgaWYgKGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1hdXRvc2xpZGVcIikpXG4gICAgICAgICAgICByZXR1cm4gY291bnRQcmV2KGUsIFtcImRhdGEtaGlkZS1mcm9tLWF1dG9zbGlkZVwiXSk7XG4gICAgICAgIHJldHVybiBjb3VudFByZXYoZSwgW1wiZGF0YS1yaWdodC1vbmx5LXNlY3Rpb25cIiwgLi4uZ2VuZXJpY0hpZGluZ0VsZW1lbnRzXSk7XG4gICAgfVxuICAgIGNvbnN0IG5vT2ZIaWRkZW5SaWdodCA9IChlOiBFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmIChlLmdldEF0dHJpYnV0ZShcImRhdGEtYXV0b3NsaWRlXCIpKVxuICAgICAgICAgICAgcmV0dXJuIGNvdW50TmV4dChlLCBbXCJkYXRhLWhpZGUtZnJvbS1hdXRvc2xpZGVcIl0pO1xuICAgICAgICByZXR1cm4gY291bnROZXh0KGUsIFtcImRhdGEtbGVmdC1vbmx5LXNlY3Rpb25cIiwgLi4uZ2VuZXJpY0hpZGluZ0VsZW1lbnRzXSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBnZXRJZHgoczogc3RyaW5nIHwgbnVsbCkge1xuICAgICAgICBpZiAoIXMpIHJldHVybiAgbnVsbFxuICAgICAgICBpZiAocz8uc3RhcnRzV2l0aChcIiNcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gcy5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwSW5kZXgoaWQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzID8gcGFyc2VJbnQocywgMTApIDogbnVsbFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBkYXRhLW5leHQtc2xpZGUtaW5kZXhoLCBtdXN0IGJlIGEgbnVtYmVyLCBnb3QgJHtzfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqKioqKlxuICAgICAqIFN1cHBvcnQgZm9yIG5leHQtc2xpZGUtaWR4XG4gICAgICoqKioqKi9cblxuICAgIGNvbnN0IGdldE5leHRTbGlkZUluZGV4SCA9IChlOiBFbGVtZW50KTogbnVtYmVyIHwgbnVsbCA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSBlLmdldEF0dHJpYnV0ZShcImRhdGEtbmV4dC1zbGlkZS1pbmRleGhcIik7XG4gICAgICAgIHJldHVybiBnZXRJZHgocyk7XG4gICAgfTtcblxuICAgIC8qKioqKipcbiAgICAgKiBTdXBwb3J0IGZvciBwcmV2aW91cy1zbGlkZS1pZHhcbiAgICAgKioqKioqL1xuXG4gICAgY29uc3QgZ2V0UHJldlNsaWRlSW5kZXhIID0gKGU6IEVsZW1lbnQpOiBudW1iZXIgfCBudWxsID0+IHtcbiAgICAgICAgY29uc3QgcyA9IGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcmV2aW91cy1zbGlkZS1pbmRleGhcIik7XG4gICAgICAgcmV0dXJuIGdldElkeChzKTtcblxuXG4gICAgfTtcblxuXG4gICAgY29uc3QgbG9va3VwSW5kZXggPSAoaWQ6IHN0cmluZyk6IG51bWJlciA9PiB7XG4gICAgICAgIGNvbnN0IHNsaWRlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2xpZGVzXCIpO1xuICAgICAgICBjb25zdCBmID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICByZXR1cm4gKHNsaWRlcyAmJiBmKSA/IEFycmF5LmZyb20oc2xpZGVzLmNoaWxkcmVuKS5pbmRleE9mKGYpIDogLTE7XG4gICAgfTtcblxuXG4gICAgLyoqKioqKlxuICAgICAqIEV4cG9ydHNcbiAgICAgKioqKioqL1xuICAgIGNvbnN0IFdlYnlhcm5zOiBhbnkgPSB7XG4gICAgICAgIG5vT2ZIaWRkZW5MZWZ0LFxuICAgICAgICBub09mSGlkZGVuUmlnaHQsXG4gICAgICAgIGdldE5leHRTbGlkZUluZGV4SCxcbiAgICAgICAgZ2V0UHJldlNsaWRlSW5kZXhILFxuICAgICAgICBsb29rdXBJbmRleCxcbiAgICB9O1xuXG5cbiAgICBpZiAoZXhwb3NlQWxsRm9yVGVzdHMpIHtcbiAgICAgICAgLy8gRm9yIEplc3RcbiAgICAgICAgV2VieWFybnMuY291bnROZXh0ID0gY291bnROZXh0O1xuICAgICAgICBXZWJ5YXJucy5jb3VudFByZXYgPSBjb3VudFByZXY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdlYnlhcm5zO1xufSkpO1xuXG5cblxuXG5cblxuIl19