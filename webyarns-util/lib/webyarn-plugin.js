"use strict";

/// <reference path ="../../node_modules/@types/reveal/index.d.ts"/>
(function () {
  var plugin = {
    init: function init() {
      var style = document.createElement('style');
      document.head.appendChild(style);
      Reveal.addEventListener('slidechanged', function (event) {
        addSupportForTimedSections(event);
        addSupportForOneTimeSections(event);
        addSupportForUnhideSections(event);
        addSupportToHideControls(event);
        addSupportToHideOtherSections(event);
        addSupportToUnHideOtherSections(event);
        addSupportToHideAfterVisit(event);
      });
      addSupportToLockOrUnlockAfterVisits();
      addSupportForAnchorWithDataLink(style.sheet);
      addSupportForProceedToNextAfterVideoPlayed();
    }
  };
  /**
   * Automatic proceed to next slide  once a video has completed
   */

  function addSupportForProceedToNextAfterVideoPlayed() {
    document.querySelectorAll("video[data-auto-next]").forEach(function (v) {
      v.addEventListener('ended', function (_) {
        return Reveal.next();
      });
    });
  }
  /**
   * allows for
   * `<a data-link-indexh="1">link to slide</a>`
   * @param webyarnsCSS
   */


  function addSupportForAnchorWithDataLink(webyarnsCSS) {
    webyarnsCSS.insertRule("a[data-link-indexh] { cursor: pointer }", 0);
    document.querySelectorAll("a[data-link-indexh]").forEach(function (e) {
      return e.addEventListener("click", function (evt) {
        evt.preventDefault();
        var s = e.getAttribute("data-link-indexh");

        if (s) {
          var idx = parseInt(s, 10);
          Reveal.slide(idx);
        }
      });
    });
  }

  function isIndex(value) {
    return /^\d+$/.test(value);
  }
  /**
   *
   * Syntax
   * <section data-auto-move-to="..." data-auto-move-time-sec="..>
   *
   * Automatically moves to a section after a timeout
   * Possible values for data-auto-move-to:
   *  - 'next' and 'prev'
   *  - a url hash value ('#/some-id')
   *  - id of a section ('some-id')
   *  - an position (one-based) of a section ('12')
   *
   *  data-auto-move-time-sec is optional. Defaults to 1 second
   */


  function addSupportForTimedSections(event) {
    var rx = /random\(([0-9,\s]+)\)/;
    var curAutoMove = event.currentSlide.getAttribute("data-auto-move-to");

    if (curAutoMove) {
      var providedValue = event.currentSlide.getAttribute("data-auto-move-time-sec");
      var timeout = providedValue ? Number.parseFloat(providedValue) * 1000 : 1;
      var match = curAutoMove.match(rx);
      var timer = setTimeout(function () {
        if (curAutoMove === "next") {
          Reveal.next();
        } else if (curAutoMove === "prev") {
          Reveal.prev();
        } else if (curAutoMove.charAt(0) === "#") {
          document.location.hash = curAutoMove;
        } else if (match) {
          var values = match[1].split(",").map(function (e) {
            return e.trim();
          }).map(function (i) {
            return Number.parseInt(i, 10);
          });
          var random = values[Math.floor(Math.random() * values.length)];
          Reveal.slide(random);
        } else {
          if (isIndex(curAutoMove)) {
            var slide = parseInt(curAutoMove, 10) - 1;
            Reveal.slide(slide);
          } else {
            // @ts-ignore
            var i = Webyarns.lookupIndex(curAutoMove);

            if (i === -1) {
              console.error("get not find slide with id", curAutoMove);
            }

            Reveal.slide(i);
          }
        }
      }, timeout);
      Reveal.addEventListener('slidechanged', function () {
        return clearTimeout(timer);
      });
    }
  }
  /**
   * syntax data-one-time
   *
   * Section is shown only one time
   */


  function addSupportForOneTimeSections(event) {
    var prevSlide = event.previousSlide;
    if (!prevSlide) return;
    var onetime = prevSlide.getAttribute("data-one-time");
    if (onetime) prevSlide.setAttribute("data-hidden-section", "true");
  }
  /**
   * syntax <section data-unhide="toggle | once"->
   *
   * Section is shown only one time
   */


  function addSupportForUnhideSections(event) {
    var unhide = event.currentSlide.getAttribute("data-unhide");
    if (!unhide) return;

    switch (unhide) {
      case "toggle":
        event.currentSlide.toggleAttribute("data-hidden-section");
        break;

      case "":
      case "once":
        event.currentSlide.removeAttribute("data-hidden-section");
        break;

      default:
        console.error("webyarn's @data-unhide unknown value ".concat(unhide, ", must be one of: \"toggle\" | \"once\" | \"\""));
    }
  }
  /**
   * syntax: data-hide-controls
   *
   * hides controls on slide
   * @param event
   */


  function addSupportToHideControls(event) {
    var _event$previousSlide;

    var controls = document.querySelector(".controls");
    var hideOnPrev = (_event$previousSlide = event.previousSlide) === null || _event$previousSlide === void 0 ? void 0 : _event$previousSlide.hasAttribute("data-hide-controls");
    var hideOnCurrent = event.currentSlide.hasAttribute("data-hide-controls");

    if (controls && hideOnPrev) {
      controls.style.display = 'block';
      controls.querySelectorAll("button:not(.navigate-left)").forEach(function (e) {
        e.style.display = "block";
        e.classList.remove("impair");
        e.disabled = false;
      });
    }

    if (controls && hideOnCurrent) {
      var action = event.currentSlide.getAttribute("data-hide-controls");

      if (!action || action === "") {
        controls.style.display = 'none';
      } else {
        var actions = action.split(",").map(function (s) {
          return s.trim();
        });

        if (actions.includes("keep-left")) {
          controls.querySelectorAll("button:not(.navigate-left)").forEach(function (e) {
            return e.style.display = "none";
          });
        }

        if (actions.includes("impair-right")) {
          var rightBtn = controls.querySelector(".navigate-right");
          setTimeout(function () {
            rightBtn.classList.remove("enabled");
            rightBtn.classList.add("impair");
            rightBtn.style.display = "block";
            rightBtn.style.visibility = "visible";
            rightBtn.style.opacity = "1";
            rightBtn.disabled = true;
          }, 0);
        }
      }
    }
  }
  /**
   *  syntax data-hide-section="«id»,«id»"
   * @param event
   */


  function addSupportToHideOtherSections(event) {
    var a = event.currentSlide.getAttribute("data-hide-section");
    if (!a) return;
    a.split(",").forEach(function (id) {
      var section = document.getElementById(id);
      if (!section) console.warn("cannot find element with id ".concat(id, " to hide"));else section.setAttribute("data-hidden-section", "");
    });
  }
  /**
   *  syntax data-unhide-section="«id»,«id»"
   * @param event
   */


  function addSupportToUnHideOtherSections(event) {
    var a = event.currentSlide.getAttribute("data-unhide-section");
    if (!a) return;
    a.split(",").forEach(function (id) {
      var section = document.getElementById(id);
      if (!section) console.warn("cannot find element with id ".concat(id, " to hide"));else section.removeAttribute("data-hidden-section");
    });
  }
  /**
   * data-hide-after-visit
   */


  function addSupportToHideAfterVisit(event) {
    if (event.currentSlide.hasAttribute("data-hide-after-visit")) {
      event.currentSlide.setAttribute("data-hidden-section", "");
    }
  }

  var Action;
  /**
   * data-unlock-after-visited="a,b"
   */

  (function (Action) {
    Action[Action["LOCK"] = 0] = "LOCK";
    Action[Action["UNLOCK"] = 1] = "UNLOCK";
  })(Action || (Action = {}));

  var unlockAttributeName = "data-unlock-after-visited";
  var lockAttributeName = "data-lock-after-visited";

  function addSupportToLockOrUnlockAfterVisits() {
    var unlockData = new Map();
    var lockData = new Map();

    _initLockOrUnlockAfterVisits(unlockAttributeName, unlockData, true);

    _initLockOrUnlockAfterVisits(lockAttributeName, lockData, false);

    Reveal.addEventListener('slidechanged', function (event) {
      var id = event.currentSlide.getAttribute("id");

      if (id) {
        _checkSections(id, unlockAttributeName, unlockData, Action.UNLOCK);

        _checkSections(id, lockAttributeName, lockData, Action.LOCK);
      }
    });
  }

  function _checkSections(id, attributeName, data, action) {
    if (data.has(id)) {
      data.get(id).forEach(function (sectionToLockOrUnlockId) {
        try {
          var sectionToLockOrUnLock = document.getElementById(sectionToLockOrUnlockId);
          var sectionsToVisitRemaining = sectionToLockOrUnLock.getAttribute(attributeName).split("&").map(function (s) {
            return s.trim();
          }).filter(function (s) {
            return s != id;
          });

          if (sectionsToVisitRemaining.length === 0) {
            sectionToLockOrUnLock.removeAttribute(attributeName);
            if (action == Action.UNLOCK) sectionToLockOrUnLock.removeAttribute("data-hidden-section");else sectionToLockOrUnLock.setAttribute("data-hidden-section", "");
          } else sectionToLockOrUnLock.setAttribute(attributeName, sectionsToVisitRemaining.join("&"));
        } catch (e) {
          throw Error("error processing ".concat(sectionToLockOrUnlockId, ": ").concat(e));
        }
      });
      data["delete"](id);
    }
  }

  function _initLockOrUnlockAfterVisits(attributeName, data, hide) {
    document.querySelectorAll("section[".concat(attributeName, "]")).forEach(function (e) {
      var unlockSections = e.getAttribute(attributeName).split("&").map(function (s) {
        return s.trim();
      });
      unlockSections.forEach(function (id) {
        var sectionToUnlockId = e.getAttribute("id");
        if (!sectionToUnlockId) console.error("section with [".concat(attributeName, "] requires an id"));else {
          var _data$get;

          var set = (_data$get = data.get(id)) !== null && _data$get !== void 0 ? _data$get : new Set();
          set.add(sectionToUnlockId);
          data.set(id, set);
        }
      });
      if (hide) e.setAttribute("data-hidden-section", "");
    });
  } // @ts-ignore


  Reveal.registerPlugin('WebyarnPlugin', plugin); // Polyfills

  if (!Element.prototype.toggleAttribute) {
    Element.prototype.toggleAttribute = function (name, force) {
      if (force !== void 0) force = !!force;

      if (this.hasAttribute(name)) {
        if (force) return true;
        this.removeAttribute(name);
        return false;
      }

      if (force === false) return false;
      this.setAttribute(name, "");
      return true;
    };
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,